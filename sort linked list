// Brute force approach
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if (!head) return nullptr;  

        vector<int> d;
        ListNode* temp = head;
        while (temp != nullptr) {
            d.push_back(temp->val);
            temp = temp->next;
        }

        sort(d.begin(), d.end());

        temp = head;
        for (int i = 0; i < d.size(); i++) {
            temp->val = d[i];
            temp = temp->next;
        }

        return head;  
    }
};

// optimal code using merge sort

class Solution {
public:
    ListNode* merge(ListNode* l1, ListNode* l2) {
        ListNode dummy(0);
        ListNode* tail = &dummy;
        
        while (l1 && l2) {
            if (l1->val < l2->val) {
                tail->next = l1;
                l1 = l1->next;
            } else {
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }
        if (l1) tail->next = l1;
        if (l2) tail->next = l2;
        return dummy.next;
    }
    
    ListNode* getMiddle(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head->next;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
    ListNode* sortList(ListNode* head) {
        if (!head || !head->next) return head;
        
        ListNode* mid = getMiddle(head);
        ListNode* right = mid->next;
        mid->next = nullptr;
        
        ListNode* left = sortList(head);
        right = sortList(right);
        
        return merge(left, right);
    }
};

