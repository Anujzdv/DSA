#include <bits/stdc++.h>
using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

ListNode* rotateRight(ListNode* head, int k) {
    if (!head || !head->next || k == 0) {
        return head;
    }
    ListNode* temp = head;
    int n = 1;
    while (temp->next) {
        temp = temp->next;
        n++;
    }
    ListNode* tail = temp;
    tail->next = head;
    k = k % n;
    int step = n - k;
    temp = head;
    for (int i = 0; i < step - 1; i++) {
        temp = temp->next;
    }
    ListNode* newHead = temp->next;
    temp->next = nullptr;
    return newHead;
}

ListNode* buildList(const vector<int>& vals) {
    if (vals.empty()) return nullptr;
    ListNode* head = new ListNode(vals[0]);
    ListNode* cur = head;
    for (int i = 1; i < vals.size(); i++) {
        cur->next = new ListNode(vals[i]);
        cur = cur->next;
    }
    return head;
}

void printList(ListNode* head) {
    while (head) {
        cout << head->val;
        if (head->next) cout << " -> ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    int n, k;
    cout << "Enter number of nodes: ";
    cin >> n;

    vector<int> vals(n);
    cout << "Enter list values: ";
    for (int i = 0; i < n; i++) cin >> vals[i];

    cout << "Enter k: ";
    cin >> k;

    ListNode* head = buildList(vals);

    cout << "Original list: ";
    printList(head);

    ListNode* rotated = rotateRight(head, k);

    cout << "Rotated list by " << k << ": ";
    printList(rotated);

    return 0;
}
